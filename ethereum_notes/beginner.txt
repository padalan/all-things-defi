* Ethereum maintains bank accounts for it's customers, humans and Code (contracts).
Increment the balance of the recipient account, and decrement the balance of the originating account.

* List of accounts and their balaces is known as state. Every transaction thus can be seen as a state transition.

* Imagine contracts as lawyers who do paperwork for you.

* Amount of work taken to execute the contract is denoted in a quantity called Gas.

* Transaction represents a single session with the EVM. 

* Gas             ~   Fuel/Petrol/Oil
  Smart contract  ~   Engine
  Gas needed      ~   Mileage (operations dependent on engine)
  Gas price/Fee   ~   Oil price based on economy
  Gas limit       ~   Capacity of fuel tank. Max amount of fuel that can be used.
  startGas        ~   There is enough fuel in the tank to reach the destination
  startGas in Ethereum Whte Paper. gasLimit in Ethereum Yellow Paper.
  remainingGas    ~   The fuel remaining after (Each operation or) reaching the destination.
  Block Gas Limit =   4,712,388 ~ 224 tx that each have a startGas of 21000.

* Storage costs Ether. If there is a step that cears an entry in the storage, the fee for executing that operation is waived, and a refund is given for freeing up storage space.

* Miners think about profit. If there is one transaction with start gas of 5 million, and another with 100 transactions with startGas of 50,000, miners are likely to prioritiz a set of small transactions over a single transaction with very high startGas. This can lead to delay of execution of high startGas transaction.
 
* The transaction that runs out of gas is reverted, but still included in a block an the associated fee is paid to the miner.

* Originator must pay for all the fuel. Ether placed in escrow.
* Out of gas exception.

* Each account has a state associated with it and a 20-byte address.

* Unliked EOA conract accounts cannot initiate new transactions. Instead, contract accounts can only fire transactions inrespose to other transactions they have recieved from EOA or other contract account. Internal transacion is transaction accross contract account.

* codeHash: For contract accounts, codeHash is the code that gets hashed. For EOA it's the has of the empty string.

* Begining from the root node of the tree, the key should tell you which child node to follow to get to the correspoding value, which is stored in the leaf nodes.

* In ethereum, the key-value mapping for the state tree is between address and their associated accounts, including the balance, nonce, codeHash, storageRoot. storageRoot is itself a tree.

* Every block has a 'Header' which stores the hash of the root node of three different Merkle trie structures including:
  1. State trie
  2. Transaction trie
  3. Receipts trie

* light nodes have access to block headers, which contain hashes of the three ries. They can sill easily generate and recieve verifiable answers about transactions, events, balances, etc.

* The benifit of Merkle Patricia tree is that the root node of this structure is cryptographically dependent on the data stored in the tree, and so that hash of the root node can be used as a secure identity for this data. Since the block header includes the root hash of the state, transaction, and receipts trees, any node can balidate a small part of state of Ethereum without needing to store the entire state, which can be potentiaally unbounded in size.

* Simply, transaction is a cryptographically signed piece of instruction that is generated by an externally owned account, serialized, and then submitted to the blockchain.

* All transactions contain following feilds:
  - nonce : a count of the number of transacions sent by the sender.
  - gasPrice: the number of Wei that the seder is willing to pay per unit of gas required to execute the transaction.
  - gasLimit: Maximium upfront amount paid by the sender to execute the transaction.
  - to: the address of the recipient. During contract creation, the contract address does not exist yet. Hence an empty value is used.
  - value: the amount of wei to be transferred from the sender to the recipient. In contract-creation transaction, this value serves as the starting balance within the newly created contract account.
  - v,r,s: used to generate the signature that identifies the sender of the transaction.
  - init: Inly exits for contract-creation transaction.When init is run, it returns the body of the account code, which is the piece of code that is permanetly associated with the contract account.
  - date: Optional input data, only exists for message calls. Example, for domain creation smart contract, a cal to the contract might expect input fields such as the domain and IP address.

* Ommer block = uncle block = Orphaned blocks. Parent's parent and uncle's parent are the same.

A bock header is a portion of the block consisting of:

- parentHash: the hash of the parent block's header
- ommersHash: a hash of the current block's list of uncles
- benificiary: the account address that recieves the mining fees.
- *stateRoot: the hash of the root node of he state trie
- *tractionRoot: the hash of the root node of the trie that contains all the transactions
- *receiptsRoot: the hash of the root node of the trie that contains the receipts of all the transactions
- logsBloom: a Bloom  filter (data structure) that consists of log information
- difficulty: the difficulty level of this block
- number: the count of the current block
- gasLimit: the current gas limit per block
- gasUsed: the sum of total gas used by transactios in this block
- timestamp: the unix timestamp of this block's inception
- extraData: extr data related to this block
- mixHash: the hash that, when combined with the nonce, proves that block has carried out enough computation
- nonce: the hash that, when comnined with mixHash, proves that this block has carried ou enough computation



